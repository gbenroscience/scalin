#!/bin/bash
# The path where scalin stores its system files
APP_DIR=/home/scalin
# mkdir -p ${APP_DIR}
TYPE_SPRINGBOOT="springboot"
TYPE_MICRONAUT="micronaut"
TYPE_QUARKUS="quarkus"
TYPE_JAR="jar"
TYPE_WAR="war"
TYPE_NATIVE="native"
servicePathLines=''
serviceNameLines=''

basePort=8080
instances=1
create="xxx" # Will teardown all preexisting instances of the app and create new services
desc='Example scalin service'
service=''
user='root'
group='root'
# Load environment variables from this file
envFile=''
workDir=''
list='xxx'
execPath=''
# We support springboot, quarkus and micronaut, jar, war and native for now, but we default to native(if not specified). We use this to determine how to build the ExecStart line.
appType=$TYPE_NATIVE
# path to a script that will be run before running commands that create services.
preRun='xxx'
status="xxx"
kill="xxx"
teardown="xxx"
run="xxx"
help='xxx' 
deflines=50  # default number of lines
lines=$deflines  # default number of lines
 

# NEWLINE=$'\n'
NEWLINE='
'
print_usage() {
  printf "Usage: Do bash scalin or scalin -h to view help-----$NEWLINE"
}

while getopts p:n:c:d:s:u:g:w:e:x:t:f:vkrhzli flag; do
    case "${flag}" in
        p) basePort=${OPTARG} ;;
        n) instances=${OPTARG} ;;
        c) create="" ;;
        d) desc=${OPTARG} ;;
        s) service=${OPTARG} ;;
        u) user=${OPTARG} ;;
        g) group=${OPTARG} ;;
        w) workDir=${OPTARG} ;;
        e) execPath=${OPTARG} ;;
        x) preRun=${OPTARG} ;;
        t) appType=${OPTARG} ;;
        f) envFile=${OPTARG} ;;
        v) status=${OPTARG} ;;
        k) kill=${OPTARG} ;;
        r) run=${OPTARG} ;;
        h) help=${OPTARG} ;;
        z) teardown=${OPTARG} ;;
        l) lines=${OPTARG} ;;
        i) list=${OPTARG} ;;
        *) print_usage
        exit 1 ;;
    esac
done
echo "create= $create"
if [ "$help" = "" ]; then
echo 'HELP:'
echo 'Use the -p flag to specify the base port number.(DEFAULT ${basePort})'
echo 'Use the -n flag to specify the number of instances to create.(DEFAULT ${instances})'
echo 'Your instances will be spread on ports ranging from the supplied or default value up to (base+instances-1)'
echo 'Use the -c flag to specify create mode: e.g:'
echo 'scalin -s appName -c -p 8000 -n 3 -d "Online Radio" -t springboot -u root -g wheel -w /home/apps/etc/ -f /etc/app.env -e /home/apps/xx/yy/a.war'
echo 'Use the -s flag to supply a name for the app being scaled.'
echo 'Use the -d flag to supply a description for the app being scaled.'
echo "Use the -u flag to specify the linux user that is running the app's services."
echo "Use the -g flag to specify the linux group that is running the app's services."
echo 'Use the -w flag to specify the working directory for the service.'
echo 'Use the -e flag to specify the path to the executable for the service'
echo 'Use the -x flag to specify the path to a script that should be run before executing commands that create services'
echo 'Use the -t flag to specify the type of application being scaled. (native, quarkus, micronaut, springboot, jar, war, native(default)). For the jar and native types, make sure your application can receive the port number from the command line args using --port=<port_number>' 
echo 'Use the -f flag to specify a file that contains environment variables to be loaded before running the commands that create services'
echo 'Use the -v flag to show the status for the services when installed'
echo 'Use the -k flag to kill the services'
echo 'Use the -z flag to destroy and delete the pre-created services'
echo 'Use the -r flag to run or restart the pre-created services'
echo 'Use the -h flag to show the help for this tool'
echo "Use the -i flag to show all of scalin's current apps"
echo "If the -w flag is not available, the current directory of this script will be taken as the working directory and the executable's path will be ${workDir}/main"
echo "Hence, if you do not wish to supply these flags, just put your executable file in the same directory as this script and you will be fine"
echo "Use the -l flag to specify how many lines of status log to show per instance (DEFAULT ${deflines})"
exit 0
fi



if [ "$list" = "" ]; then # list specified and.. scalin -i
     if [ "$service" = "" ]; then # no app specified ---- scalin -i
            # Check if the file exists
            if [ -d "$APP_DIR" ]; then
                echo "=========================Scalin Apps========================="
                 for item in "$APP_DIR"/*; do
                 # Use basename to get only the file/directory name
                 echo "$(basename "$item")"
                 done
                 exit 0
            else
                 echo "No scalin app created yet!"
                 exit 1
            fi
     else #  scalin -s app -i  ///fetch the services belonging to the orchestrated app
            # Check if the file exists
              echo "Service name is ${service}"
               # List services belonging to the app
               # Full path to the target file
               TARGET="$APP_DIR/$service"/.services.ser
               # Check if the file exists
               echo "=========================Scalin App($service's services)========================="
               if [ -n "$TARGET" ]; then
                 while IFS= read -r ln; do
                   echo "$ln"
                 done < "$TARGET"
                   exit 0
                else
                   echo " Service listing not found"
                   exit 1
                fi
           exit 1
     fi
fi

if [ "$service" = "" ]; then
     echo "Please specify a service to continue!"
     exit 1
  else # scalin -s app -i  ///fetch the services belonging to the orchestrated app
      echo "Service name is ${service}"
fi



if [ "$appType" = "$TYPE_SPRINGBOOT" ]; then
echo "Spring boot application detected"
elif [ "$appType" = "$TYPE_MICRONAUT" ]; then
echo "Quarkus application detected"
elif [ "$appType" = "$TYPE_QUARKUS" ]; then
echo "Micronaut application detected"
elif [ "$appType" = "$TYPE_JAR" ]; then
echo "Executable jar file detected.. Your jar application should accept the port number with --port=<port_number> syntax on the command line"
elif [ "$appType" = "$TYPE_WAR" ]; then
echo "Executable war file detected.. Your war application should accept the port number with --port=<port_number> syntax on the command line"
elif [ "$appType" = "$TYPE_NATIVE" ]; then
echo "Native linux executable detected.. Your app should accept the port number with --port=<port_number> syntax on the command line"
else
echo "Unsupported application: $appType , the system will now exit."
exit 1
fi


# Every service we create will have its registry here
serviceFolder=${APP_DIR}/${service}
# Create the serviceFolder directory
if [ ! -d "$serviceFolder" ]; then
    if mkdir -p $serviceFolder; then
      echo "created service folder"
    else
      echo "couldn't create service folder"
      exit 1
    fi
  else
     echo "service folder exists already"  
fi


# store the names of the services here
serviceNamesRegistry=${serviceFolder}/.services.ser

# store the full paths to the services here
servicePathRegistry=${serviceFolder}/.registry.ser


# User just wishes to check the status of the instances (collect up to 100 lines per instance and merge)
if [ "$status" = "" ] ; then
  echo "Check status of all instances (up to $lines lines each, merged)"
  if [ -f "$serviceNamesRegistry" ]; then
      while IFS="" read -r p || [ -n "$p" ]
      do
        echo "=============================="
        echo "Status for instance $p"
        echo "=============================="
        # Get up to 100 lines of status for each instance
        if systemctl status --lines=$lines ${p}; then
          echo "---- END STATUS FOR $p ----"
        else
          echo "status check failed for $p"
        fi
        echo
      done < ${serviceNamesRegistry}
      exit 0
  else 
      echo "No status to check"
      exit 1
  fi
fi

# User just wishes to kill the instances
if [ "$kill" = "" ] ; then
echo "Kill all instances"
if [ -f "$serviceNamesRegistry" ]; then
    while IFS="" read -r p || [ -n "$p" ]
do
  echo "Stopping instance $p"
  
  if systemctl stop ${p}; then
   echo "stopped $p successfully"
  else
   echo "couldn't stop $p"
  fi
done < ${serviceNamesRegistry}
exit 0
else 
    echo "No instance to kill"
        exit 1
fi
fi

# User just wishes to start the existing instances
if [ "$run" = "" ] ; then
echo "Restart all instances"
if [ -f "$serviceNamesRegistry" ]; then
    while IFS="" read -r p || [ -n "$p" ]
do
  echo "Restarting instance $p"
  if systemctl restart ${p}; then
   echo "started $p successfully"
  else
   echo "couldn't start $p"
  fi
done < ${serviceNamesRegistry}
exit 0
else 
    echo "No instance to start"
        exit 1
fi
fi



teardownservices(){
  local snr=$1
  local spr=$2
  
# Destroy, delete and recreate all instances
# loop through services in servicePathRegistry, shut them down, and disable them(stop startup on boot)
if [ -f "$snr" ]; then
    echo "$snr exists."
    while IFS="" read -r p || [ -n "$p" ]
     do
     printf '%s\n' "$p"

  if systemctl stop ${p}; then
   echo "stopped $p successfully"
  else
   echo "couldn't stop $p"
   exit 1
  fi

  if systemctl disable ${p}; then
   echo "disabled(start on boot) $p successfully"
  else
   echo "couldn't disable(start on boot) for $p "
   exit 1
  fi

done < ${snr}
else 
    echo "${snr} does not exist."
fi

# delete the snr
  if rm -f ${snr}; then
   echo "deleted service names registry successfully"
  else
   echo "couldn't delete the service names registry"
   exit 1
  fi


# Now delete all the service entries in /etc/systemd/system/
if [ -f "$spr" ]; then
    echo "$spr exists."
    while IFS="" read -r p || [ -n "$p" ]
     do
     printf '%s\n' "$p"
     echo "deleting service ${p}"
     rm -f ${p}
  
done < ${spr}
else 
    echo "${spr} does not exist."
fi
# delete the service spr

  if rm -f ${spr}; then
   echo "deleted service paths registry successfully"
  else
   echo "couldn't delete the service paths registry"
   exit 1
  fi
  
}

# TEAR DOWN scalin -s appName -z
if [ "$teardown" = "" ]; then # teardown was specified
echo "teardown all instances and destroy scaled service"
  teardownservices $serviceNamesRegistry $servicePathRegistry
     exit 0
fi
# END TEARDOWN
 



if [ "$create" = "" ]; then
  echo "services will be created; pre-existing services will be destroyed and deleted!"
  teardownservices $serviceNamesRegistry $servicePathRegistry
  echo "destroyed and deleted all running instances. will create to new specs"
  
   if [ "$envFile" != "" ]; then
      echo "Loading environment variables from $envFile"
      if [ -f "$envFile" ]; then
        source $envFile
      else
        echo "Environment file $envFile does not exist. Please check the path and try again."
        exit 1
      fi
    else
     echo "No environment file specified, proceeding without loading any environment variables."
   fi


   # No working directory supplied, so set a default
   if [ "$workDir" = "" ] ; then
     workDir=$serviceFolder
   fi

   # No executable path supplied, so set a default
   if [ "$execPath" = "" ] ; then
   execPath=$workDir/main
   fi

  # Run some checks to ensure the inputs are valid
  if ! [[ "$basePort" =~ ^[0-9]+$ ]]; then
    echo "Error: basePort (-p) must be a valid number."
    exit 1
  fi
  if ! [[ "$instances" =~ ^[0-9]+$ && "$instances" -gt 0 ]]; then
    echo "Error: instances (-n) must be a positive integer."
    exit 1
  fi
  if [ -z "$service" ]; then
    echo "Error: You must specify a service name with -s."
    exit 1
  fi

  else
    echo "The -c flag(to create) is needed for every other task"
    exit 0  
fi


echo 'run user-specified tasks'
if [ $preRun != "" ] && [ $preRun != "xxx" ]; then
  # task exists
  if source $preRun; then
   echo 'user-specified scripts completed successfully'
  else
   echo 'user-specified scripts failed'
   exit 1
  fi
fi

execCrash="false"
javaPath=$(which java)
echo "creating ${instances} fresh instances"
# create new services and register them. Also start them all.
endPort=$(($basePort + $instances - 1))
lastInst=$(($instances - 1))
for (( i=0; i<$instances; i++ ))
do 
port=$(($basePort + $i))
fileName=${service}${port}.service
path=/etc/systemd/system/${fileName}
echo "Will deploy instance at ${path}"
cat << EOF > ${path}
[Unit]
Description=${desc} on ${port}
After=multi-user.target
[Service]
User=${user}
Group=${group}
WorkingDirectory=${workDir}
$(

if [ "$envFile" != "" ]; then
echo "EnvironmentFile=${envFile}"
else
echo "EnvironmentFile=-/etc/default/${service}.env"
fi

if [ "$appType" = "$TYPE_SPRINGBOOT" ]; then
SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-production}
echo "ExecStart=${javaPath} -Dspring.profiles.active=${SPRING_PROFILES_ACTIVE} -jar ${execPath} --server.port=${port}"
elif [ "$appType" = "$TYPE_MICRONAUT" ]; then
echo "ExecStart=${javaPath} -jar ${execPath} --micronaut.server.port=${port}"
elif [ "$appType" = "$TYPE_QUARKUS" ]; then
echo "ExecStart=${javaPath} -jar ${execPath} --quarkus.http.port=${port}"
elif [ "$appType" = "$TYPE_JAR" ]; then
echo "ExecStart=${javaPath} -jar ${execPath} --port=${port}"
elif [ "$appType" = "$TYPE_WAR" ]; then
echo "ExecStart=${javaPath} -jar ${execPath} --port=${port}"
elif [ "$appType" = "$TYPE_NATIVE" ]; then
echo "ExecStart=${execPath} --port=${port}"
else
    execCrash="true"
fi
)

[Install]
WantedBy=multi-user.target
EOF


if [ "$execCrash" = "true" ]; then
        echo "The appType(-t) is unknown.The system will now exit. Specify a supported appType(-t) and try again"
        exit 1
    else
        echo "services written to systemd"
fi

  if systemctl enable ${fileName}; then
   echo "enabled(start on boot) $p successfully"
  else
   echo "couldn't enable(start on boot) for $p"
  fi

  if systemctl start ${fileName}; then
   echo "started $p successfully"
  else
   echo "couldn't start $p "
  fi

  if systemctl status ${fileName}; then
   echo "printed status for service $p"
  else
   echo "couldn't print status for service $p"
  fi




echo "setup and running ${fileName} service"
 servicePathLines+=${path}
 serviceNameLines+=${fileName}
 if [ $i -lt $lastInst ]; then
 servicePathLines+=$NEWLINE
 serviceNameLines+=$NEWLINE
 fi
 
done

# record each entry in array on a new line in the servicePathRegistry file

echo "${servicePathLines}"
echo "${serviceNameLines}"

cat << EOF > ${servicePathRegistry}
${servicePathLines}
EOF

cat << EOF > ${serviceNamesRegistry}
${serviceNameLines}
EOF


if systemctl daemon-reload; then
   echo "reloaded systemd daemon successfully"
else
   echo "couldn't reload systemd daemon"
   exit 1
fi

echo "All's well that ends well"